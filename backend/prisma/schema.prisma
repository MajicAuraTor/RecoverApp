// üóÑÔ∏è PRISMA SCHEMA FOR RECOVERAPP
// This matches your existing MySQL schema and URL-based navigation system

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Users table (for authentication)
model User {
  id          Int      @id @default(autoincrement())
  username    String   @unique @db.VarChar(255)
  email       String   @unique @db.VarChar(255)
  passwordHash String  @map("password_hash") @db.VarChar(255)
  role        Role     @default(user)
  firstName   String?  @map("first_name") @db.VarChar(100)
  lastName    String?  @map("last_name") @db.VarChar(100)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  lastLogin   DateTime? @map("last_login")
  isActive    Boolean  @default(true) @map("is_active")

  // Relations
  contentItems    ContentItem[]
  userReminders   UserReminder[]
  userMilestones  UserMilestone[]
  dailyReports    DailyReport[]
  userActivities  UserActivity[]

  @@map("users")
}

// Content items table (for /content URL)
model ContentItem {
  id          Int         @id @default(autoincrement())
  title       String      @db.VarChar(255)
  contentType ContentType @map("content_type")
  content     String?     @db.Text
  status      ContentStatus @default(draft)
  authorId    Int?        @map("author_id")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  // Relations
  author      User?       @relation(fields: [authorId], references: [id])

  @@map("content_items")
}

// User reminders table (for /reminders URL)
model UserReminder {
  id           Int        @id @default(autoincrement())
  userId       Int        @map("user_id")
  title        String     @db.VarChar(255)
  description  String?    @db.Text
  reminderTime DateTime   @map("reminder_time")
  frequency    Frequency  @default(once)
  isActive     Boolean    @default(true) @map("is_active")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  // Relations
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_reminders")
}

// User milestones table (for /progress URL)
model UserMilestone {
  id                 Int             @id @default(autoincrement())
  userId             Int             @map("user_id")
  title              String          @db.VarChar(255)
  description        String?         @db.Text
  targetDate         DateTime?       @map("target_date") @db.Date
  completionDate     DateTime?       @map("completion_date") @db.Date
  status             MilestoneStatus @default(pending)
  progressPercentage Decimal         @default(0.00) @map("progress_percentage") @db.Decimal(5,2)
  createdAt          DateTime        @default(now()) @map("created_at")
  updatedAt          DateTime        @updatedAt @map("updated_at")

  // Relations
  user               User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_milestones")
}

// Daily reports table (for /reports URL)
model DailyReport {
  id            Int      @id @default(autoincrement())
  userId        Int      @map("user_id")
  reportDate    DateTime @map("report_date") @db.Date
  moodRating    Int?     @map("mood_rating")
  painLevel     Int?     @map("pain_level")
  activityLevel Int?     @map("activity_level")
  notes         String?  @db.Text
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, reportDate], map: "unique_user_date")
  @@map("daily_reports")
}

// User activities table (for dashboard activity feed)
model UserActivity {
  id           Int          @id @default(autoincrement())
  userId       Int          @map("user_id")
  activityType ActivityType @map("activity_type")
  description  String?      @db.VarChar(500)
  createdAt    DateTime     @default(now()) @map("created_at")

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activities")
}

// Enums
enum Role {
  admin
  user
}

enum ContentType {
  tutorial
  exercise
  article
  video
}

enum ContentStatus {
  draft
  published
  archived
}

enum Frequency {
  once
  daily
  weekly
  monthly
}

enum MilestoneStatus {
  pending
  in_progress @map("in_progress")
  completed
  cancelled
}

enum ActivityType {
  login
  milestone_completed @map("milestone_completed")
  reminder_set @map("reminder_set")
  report_submitted @map("report_submitted")
}
